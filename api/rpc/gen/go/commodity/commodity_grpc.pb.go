// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: commodity.proto

package commodity

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	StreamGreeter_GetCategoryHierarchy_FullMethodName      = "/commodity.StreamGreeter/GetCategoryHierarchy"
	StreamGreeter_GetCategoriesWithParentId_FullMethodName = "/commodity.StreamGreeter/GetCategoriesWithParentId"
	StreamGreeter_CommoditiesInCategory_FullMethodName     = "/commodity.StreamGreeter/CommoditiesInCategory"
	StreamGreeter_CommoditySearch_FullMethodName           = "/commodity.StreamGreeter/CommoditySearch"
	StreamGreeter_CommodityInfo_FullMethodName             = "/commodity.StreamGreeter/CommodityInfo"
)

// StreamGreeterClient is the client API for StreamGreeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamGreeterClient interface {
	// 获取分类层级结构
	GetCategoryHierarchy(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CategoryHierarchyReply, error)
	// 根据父ID获取分类列表
	GetCategoriesWithParentId(ctx context.Context, in *ParentIdRequest, opts ...grpc.CallOption) (*CategoriesReply, error)
	// 获取分类下的商品列表
	CommoditiesInCategory(ctx context.Context, in *CategoryCommoditiesRequest, opts ...grpc.CallOption) (*CommoditiesReply, error)
	// 商品搜索
	CommoditySearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*CommoditiesReply, error)
	// 获取商品详情
	CommodityInfo(ctx context.Context, in *CommodityIdRequest, opts ...grpc.CallOption) (*CommodityDetailReply, error)
}

type streamGreeterClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamGreeterClient(cc grpc.ClientConnInterface) StreamGreeterClient {
	return &streamGreeterClient{cc}
}

func (c *streamGreeterClient) GetCategoryHierarchy(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CategoryHierarchyReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoryHierarchyReply)
	err := c.cc.Invoke(ctx, StreamGreeter_GetCategoryHierarchy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamGreeterClient) GetCategoriesWithParentId(ctx context.Context, in *ParentIdRequest, opts ...grpc.CallOption) (*CategoriesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoriesReply)
	err := c.cc.Invoke(ctx, StreamGreeter_GetCategoriesWithParentId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamGreeterClient) CommoditiesInCategory(ctx context.Context, in *CategoryCommoditiesRequest, opts ...grpc.CallOption) (*CommoditiesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommoditiesReply)
	err := c.cc.Invoke(ctx, StreamGreeter_CommoditiesInCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamGreeterClient) CommoditySearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*CommoditiesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommoditiesReply)
	err := c.cc.Invoke(ctx, StreamGreeter_CommoditySearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamGreeterClient) CommodityInfo(ctx context.Context, in *CommodityIdRequest, opts ...grpc.CallOption) (*CommodityDetailReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommodityDetailReply)
	err := c.cc.Invoke(ctx, StreamGreeter_CommodityInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamGreeterServer is the server API for StreamGreeter service.
// All implementations must embed UnimplementedStreamGreeterServer
// for forward compatibility
type StreamGreeterServer interface {
	// 获取分类层级结构
	GetCategoryHierarchy(context.Context, *EmptyRequest) (*CategoryHierarchyReply, error)
	// 根据父ID获取分类列表
	GetCategoriesWithParentId(context.Context, *ParentIdRequest) (*CategoriesReply, error)
	// 获取分类下的商品列表
	CommoditiesInCategory(context.Context, *CategoryCommoditiesRequest) (*CommoditiesReply, error)
	// 商品搜索
	CommoditySearch(context.Context, *SearchRequest) (*CommoditiesReply, error)
	// 获取商品详情
	CommodityInfo(context.Context, *CommodityIdRequest) (*CommodityDetailReply, error)
	mustEmbedUnimplementedStreamGreeterServer()
}

// UnimplementedStreamGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedStreamGreeterServer struct {
}

func (UnimplementedStreamGreeterServer) GetCategoryHierarchy(context.Context, *EmptyRequest) (*CategoryHierarchyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryHierarchy not implemented")
}
func (UnimplementedStreamGreeterServer) GetCategoriesWithParentId(context.Context, *ParentIdRequest) (*CategoriesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoriesWithParentId not implemented")
}
func (UnimplementedStreamGreeterServer) CommoditiesInCategory(context.Context, *CategoryCommoditiesRequest) (*CommoditiesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommoditiesInCategory not implemented")
}
func (UnimplementedStreamGreeterServer) CommoditySearch(context.Context, *SearchRequest) (*CommoditiesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommoditySearch not implemented")
}
func (UnimplementedStreamGreeterServer) CommodityInfo(context.Context, *CommodityIdRequest) (*CommodityDetailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommodityInfo not implemented")
}
func (UnimplementedStreamGreeterServer) mustEmbedUnimplementedStreamGreeterServer() {}

// UnsafeStreamGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamGreeterServer will
// result in compilation errors.
type UnsafeStreamGreeterServer interface {
	mustEmbedUnimplementedStreamGreeterServer()
}

func RegisterStreamGreeterServer(s grpc.ServiceRegistrar, srv StreamGreeterServer) {
	s.RegisterService(&StreamGreeter_ServiceDesc, srv)
}

func _StreamGreeter_GetCategoryHierarchy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamGreeterServer).GetCategoryHierarchy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamGreeter_GetCategoryHierarchy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamGreeterServer).GetCategoryHierarchy(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamGreeter_GetCategoriesWithParentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParentIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamGreeterServer).GetCategoriesWithParentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamGreeter_GetCategoriesWithParentId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamGreeterServer).GetCategoriesWithParentId(ctx, req.(*ParentIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamGreeter_CommoditiesInCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryCommoditiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamGreeterServer).CommoditiesInCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamGreeter_CommoditiesInCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamGreeterServer).CommoditiesInCategory(ctx, req.(*CategoryCommoditiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamGreeter_CommoditySearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamGreeterServer).CommoditySearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamGreeter_CommoditySearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamGreeterServer).CommoditySearch(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamGreeter_CommodityInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommodityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamGreeterServer).CommodityInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamGreeter_CommodityInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamGreeterServer).CommodityInfo(ctx, req.(*CommodityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StreamGreeter_ServiceDesc is the grpc.ServiceDesc for StreamGreeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamGreeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "commodity.StreamGreeter",
	HandlerType: (*StreamGreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCategoryHierarchy",
			Handler:    _StreamGreeter_GetCategoryHierarchy_Handler,
		},
		{
			MethodName: "GetCategoriesWithParentId",
			Handler:    _StreamGreeter_GetCategoriesWithParentId_Handler,
		},
		{
			MethodName: "CommoditiesInCategory",
			Handler:    _StreamGreeter_CommoditiesInCategory_Handler,
		},
		{
			MethodName: "CommoditySearch",
			Handler:    _StreamGreeter_CommoditySearch_Handler,
		},
		{
			MethodName: "CommodityInfo",
			Handler:    _StreamGreeter_CommodityInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "commodity.proto",
}
