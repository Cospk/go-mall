// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: cart.proto

package cart

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	StreamGreeter_AddCartItem_FullMethodName        = "/cart.StreamGreeter/AddCartItem"
	StreamGreeter_UpdateCartItem_FullMethodName     = "/cart.StreamGreeter/UpdateCartItem"
	StreamGreeter_UserCartItems_FullMethodName      = "/cart.StreamGreeter/UserCartItems"
	StreamGreeter_DeleteUserCartItem_FullMethodName = "/cart.StreamGreeter/DeleteUserCartItem"
	StreamGreeter_CheckCartItemBill_FullMethodName  = "/cart.StreamGreeter/CheckCartItemBill"
)

// StreamGreeterClient is the client API for StreamGreeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamGreeterClient interface {
	// 添加商品到购物车
	AddCartItem(ctx context.Context, in *AddCartItemRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	// 更新购物车商品数量
	UpdateCartItem(ctx context.Context, in *UpdateCartItemRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	// 获取用户购物车商品列表
	UserCartItems(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*CartItemsReply, error)
	// 删除购物车商品
	DeleteUserCartItem(ctx context.Context, in *DeleteCartItemRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	// 查看购物车账单（确认下单前）
	CheckCartItemBill(ctx context.Context, in *CheckCartItemBillRequest, opts ...grpc.CallOption) (*CartItemBillReply, error)
}

type streamGreeterClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamGreeterClient(cc grpc.ClientConnInterface) StreamGreeterClient {
	return &streamGreeterClient{cc}
}

func (c *streamGreeterClient) AddCartItem(ctx context.Context, in *AddCartItemRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, StreamGreeter_AddCartItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamGreeterClient) UpdateCartItem(ctx context.Context, in *UpdateCartItemRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, StreamGreeter_UpdateCartItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamGreeterClient) UserCartItems(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*CartItemsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartItemsReply)
	err := c.cc.Invoke(ctx, StreamGreeter_UserCartItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamGreeterClient) DeleteUserCartItem(ctx context.Context, in *DeleteCartItemRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, StreamGreeter_DeleteUserCartItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamGreeterClient) CheckCartItemBill(ctx context.Context, in *CheckCartItemBillRequest, opts ...grpc.CallOption) (*CartItemBillReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartItemBillReply)
	err := c.cc.Invoke(ctx, StreamGreeter_CheckCartItemBill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamGreeterServer is the server API for StreamGreeter service.
// All implementations must embed UnimplementedStreamGreeterServer
// for forward compatibility
type StreamGreeterServer interface {
	// 添加商品到购物车
	AddCartItem(context.Context, *AddCartItemRequest) (*CommonResponse, error)
	// 更新购物车商品数量
	UpdateCartItem(context.Context, *UpdateCartItemRequest) (*CommonResponse, error)
	// 获取用户购物车商品列表
	UserCartItems(context.Context, *UserIdRequest) (*CartItemsReply, error)
	// 删除购物车商品
	DeleteUserCartItem(context.Context, *DeleteCartItemRequest) (*CommonResponse, error)
	// 查看购物车账单（确认下单前）
	CheckCartItemBill(context.Context, *CheckCartItemBillRequest) (*CartItemBillReply, error)
	mustEmbedUnimplementedStreamGreeterServer()
}

// UnimplementedStreamGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedStreamGreeterServer struct {
}

func (UnimplementedStreamGreeterServer) AddCartItem(context.Context, *AddCartItemRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCartItem not implemented")
}
func (UnimplementedStreamGreeterServer) UpdateCartItem(context.Context, *UpdateCartItemRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCartItem not implemented")
}
func (UnimplementedStreamGreeterServer) UserCartItems(context.Context, *UserIdRequest) (*CartItemsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCartItems not implemented")
}
func (UnimplementedStreamGreeterServer) DeleteUserCartItem(context.Context, *DeleteCartItemRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserCartItem not implemented")
}
func (UnimplementedStreamGreeterServer) CheckCartItemBill(context.Context, *CheckCartItemBillRequest) (*CartItemBillReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCartItemBill not implemented")
}
func (UnimplementedStreamGreeterServer) mustEmbedUnimplementedStreamGreeterServer() {}

// UnsafeStreamGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamGreeterServer will
// result in compilation errors.
type UnsafeStreamGreeterServer interface {
	mustEmbedUnimplementedStreamGreeterServer()
}

func RegisterStreamGreeterServer(s grpc.ServiceRegistrar, srv StreamGreeterServer) {
	s.RegisterService(&StreamGreeter_ServiceDesc, srv)
}

func _StreamGreeter_AddCartItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCartItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamGreeterServer).AddCartItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamGreeter_AddCartItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamGreeterServer).AddCartItem(ctx, req.(*AddCartItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamGreeter_UpdateCartItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCartItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamGreeterServer).UpdateCartItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamGreeter_UpdateCartItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamGreeterServer).UpdateCartItem(ctx, req.(*UpdateCartItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamGreeter_UserCartItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamGreeterServer).UserCartItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamGreeter_UserCartItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamGreeterServer).UserCartItems(ctx, req.(*UserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamGreeter_DeleteUserCartItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCartItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamGreeterServer).DeleteUserCartItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamGreeter_DeleteUserCartItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamGreeterServer).DeleteUserCartItem(ctx, req.(*DeleteCartItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamGreeter_CheckCartItemBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCartItemBillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamGreeterServer).CheckCartItemBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamGreeter_CheckCartItemBill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamGreeterServer).CheckCartItemBill(ctx, req.(*CheckCartItemBillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StreamGreeter_ServiceDesc is the grpc.ServiceDesc for StreamGreeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamGreeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cart.StreamGreeter",
	HandlerType: (*StreamGreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCartItem",
			Handler:    _StreamGreeter_AddCartItem_Handler,
		},
		{
			MethodName: "UpdateCartItem",
			Handler:    _StreamGreeter_UpdateCartItem_Handler,
		},
		{
			MethodName: "UserCartItems",
			Handler:    _StreamGreeter_UserCartItems_Handler,
		},
		{
			MethodName: "DeleteUserCartItem",
			Handler:    _StreamGreeter_DeleteUserCartItem_Handler,
		},
		{
			MethodName: "CheckCartItemBill",
			Handler:    _StreamGreeter_CheckCartItemBill_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cart.proto",
}
