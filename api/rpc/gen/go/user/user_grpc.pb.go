// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	StreamGreeter_Register_FullMethodName              = "/user.StreamGreeter/Register"
	StreamGreeter_LoginUser_FullMethodName             = "/user.StreamGreeter/LoginUser"
	StreamGreeter_LogoutUser_FullMethodName            = "/user.StreamGreeter/LogoutUser"
	StreamGreeter_GetUserInfo_FullMethodName           = "/user.StreamGreeter/GetUserInfo"
	StreamGreeter_RefreshUserToken_FullMethodName      = "/user.StreamGreeter/RefreshUserToken"
	StreamGreeter_PasswordResetApply_FullMethodName    = "/user.StreamGreeter/PasswordResetApply"
	StreamGreeter_PasswordReset_FullMethodName         = "/user.StreamGreeter/PasswordReset"
	StreamGreeter_GetUserInfoById_FullMethodName       = "/user.StreamGreeter/GetUserInfoById"
	StreamGreeter_UpdateUserInfo_FullMethodName        = "/user.StreamGreeter/UpdateUserInfo"
	StreamGreeter_AddUserAddressInfo_FullMethodName    = "/user.StreamGreeter/AddUserAddressInfo"
	StreamGreeter_GetUserAddressList_FullMethodName    = "/user.StreamGreeter/GetUserAddressList"
	StreamGreeter_GetUserAddressInfo_FullMethodName    = "/user.StreamGreeter/GetUserAddressInfo"
	StreamGreeter_UpdateUserAddressInfo_FullMethodName = "/user.StreamGreeter/UpdateUserAddressInfo"
	StreamGreeter_DeleteUserAddressInfo_FullMethodName = "/user.StreamGreeter/DeleteUserAddressInfo"
)

// StreamGreeterClient is the client API for StreamGreeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamGreeterClient interface {
	// 注册用户
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// 登录
	LoginUser(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// 登出
	LogoutUser(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	// 获取用户信息
	GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error)
	// 刷新用户token
	RefreshUserToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
	// 申请重置登录密码  (申请修改然后发送邮件，然后验证后修改密码)
	PasswordResetApply(ctx context.Context, in *PasswordResetApplyRequest, opts ...grpc.CallOption) (*PasswordResetApplyResponse, error)
	// 重置登录密码
	PasswordReset(ctx context.Context, in *PasswordResetRequest, opts ...grpc.CallOption) (*PasswordResetResponse, error)
	// 获取用户信息-ID
	GetUserInfoById(ctx context.Context, in *GetUserInfoByIdRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error)
	// 更新用户信息
	UpdateUserInfo(ctx context.Context, in *UpdateUserInfoRequest, opts ...grpc.CallOption) (*UpdateUserInfoResponse, error)
	// 添加用户收货地址
	AddUserAddressInfo(ctx context.Context, in *AddUserAddressInfoRequest, opts ...grpc.CallOption) (*AddUserAddressInfoResponse, error)
	// 获取用户收货地址列表
	GetUserAddressList(ctx context.Context, in *GetUserAddressListRequest, opts ...grpc.CallOption) (*GetUserAddressListResponse, error)
	// 获取单个收货地址信息
	GetUserAddressInfo(ctx context.Context, in *GetUserAddressInfoRequest, opts ...grpc.CallOption) (*UserAddressInfo, error)
	// 更新用户收货地址信息
	UpdateUserAddressInfo(ctx context.Context, in *UpdateUserAddressInfoRequest, opts ...grpc.CallOption) (*UpdateUserAddressInfoResponse, error)
	// 删除用户收货地址
	DeleteUserAddressInfo(ctx context.Context, in *DeleteUserAddressInfoRequest, opts ...grpc.CallOption) (*DeleteUserAddressInfoResponse, error)
}

type streamGreeterClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamGreeterClient(cc grpc.ClientConnInterface) StreamGreeterClient {
	return &streamGreeterClient{cc}
}

func (c *streamGreeterClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, StreamGreeter_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamGreeterClient) LoginUser(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, StreamGreeter_LoginUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamGreeterClient) LogoutUser(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, StreamGreeter_LogoutUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamGreeterClient) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserInfoResponse)
	err := c.cc.Invoke(ctx, StreamGreeter_GetUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamGreeterClient) RefreshUserToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshTokenResponse)
	err := c.cc.Invoke(ctx, StreamGreeter_RefreshUserToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamGreeterClient) PasswordResetApply(ctx context.Context, in *PasswordResetApplyRequest, opts ...grpc.CallOption) (*PasswordResetApplyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PasswordResetApplyResponse)
	err := c.cc.Invoke(ctx, StreamGreeter_PasswordResetApply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamGreeterClient) PasswordReset(ctx context.Context, in *PasswordResetRequest, opts ...grpc.CallOption) (*PasswordResetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PasswordResetResponse)
	err := c.cc.Invoke(ctx, StreamGreeter_PasswordReset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamGreeterClient) GetUserInfoById(ctx context.Context, in *GetUserInfoByIdRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserInfoResponse)
	err := c.cc.Invoke(ctx, StreamGreeter_GetUserInfoById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamGreeterClient) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoRequest, opts ...grpc.CallOption) (*UpdateUserInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserInfoResponse)
	err := c.cc.Invoke(ctx, StreamGreeter_UpdateUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamGreeterClient) AddUserAddressInfo(ctx context.Context, in *AddUserAddressInfoRequest, opts ...grpc.CallOption) (*AddUserAddressInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddUserAddressInfoResponse)
	err := c.cc.Invoke(ctx, StreamGreeter_AddUserAddressInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamGreeterClient) GetUserAddressList(ctx context.Context, in *GetUserAddressListRequest, opts ...grpc.CallOption) (*GetUserAddressListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserAddressListResponse)
	err := c.cc.Invoke(ctx, StreamGreeter_GetUserAddressList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamGreeterClient) GetUserAddressInfo(ctx context.Context, in *GetUserAddressInfoRequest, opts ...grpc.CallOption) (*UserAddressInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserAddressInfo)
	err := c.cc.Invoke(ctx, StreamGreeter_GetUserAddressInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamGreeterClient) UpdateUserAddressInfo(ctx context.Context, in *UpdateUserAddressInfoRequest, opts ...grpc.CallOption) (*UpdateUserAddressInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserAddressInfoResponse)
	err := c.cc.Invoke(ctx, StreamGreeter_UpdateUserAddressInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamGreeterClient) DeleteUserAddressInfo(ctx context.Context, in *DeleteUserAddressInfoRequest, opts ...grpc.CallOption) (*DeleteUserAddressInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserAddressInfoResponse)
	err := c.cc.Invoke(ctx, StreamGreeter_DeleteUserAddressInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamGreeterServer is the server API for StreamGreeter service.
// All implementations must embed UnimplementedStreamGreeterServer
// for forward compatibility
type StreamGreeterServer interface {
	// 注册用户
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// 登录
	LoginUser(context.Context, *LoginRequest) (*LoginResponse, error)
	// 登出
	LogoutUser(context.Context, *LogoutRequest) (*LogoutResponse, error)
	// 获取用户信息
	GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error)
	// 刷新用户token
	RefreshUserToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error)
	// 申请重置登录密码  (申请修改然后发送邮件，然后验证后修改密码)
	PasswordResetApply(context.Context, *PasswordResetApplyRequest) (*PasswordResetApplyResponse, error)
	// 重置登录密码
	PasswordReset(context.Context, *PasswordResetRequest) (*PasswordResetResponse, error)
	// 获取用户信息-ID
	GetUserInfoById(context.Context, *GetUserInfoByIdRequest) (*GetUserInfoResponse, error)
	// 更新用户信息
	UpdateUserInfo(context.Context, *UpdateUserInfoRequest) (*UpdateUserInfoResponse, error)
	// 添加用户收货地址
	AddUserAddressInfo(context.Context, *AddUserAddressInfoRequest) (*AddUserAddressInfoResponse, error)
	// 获取用户收货地址列表
	GetUserAddressList(context.Context, *GetUserAddressListRequest) (*GetUserAddressListResponse, error)
	// 获取单个收货地址信息
	GetUserAddressInfo(context.Context, *GetUserAddressInfoRequest) (*UserAddressInfo, error)
	// 更新用户收货地址信息
	UpdateUserAddressInfo(context.Context, *UpdateUserAddressInfoRequest) (*UpdateUserAddressInfoResponse, error)
	// 删除用户收货地址
	DeleteUserAddressInfo(context.Context, *DeleteUserAddressInfoRequest) (*DeleteUserAddressInfoResponse, error)
	mustEmbedUnimplementedStreamGreeterServer()
}

// UnimplementedStreamGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedStreamGreeterServer struct {
}

func (UnimplementedStreamGreeterServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedStreamGreeterServer) LoginUser(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedStreamGreeterServer) LogoutUser(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogoutUser not implemented")
}
func (UnimplementedStreamGreeterServer) GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedStreamGreeterServer) RefreshUserToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshUserToken not implemented")
}
func (UnimplementedStreamGreeterServer) PasswordResetApply(context.Context, *PasswordResetApplyRequest) (*PasswordResetApplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordResetApply not implemented")
}
func (UnimplementedStreamGreeterServer) PasswordReset(context.Context, *PasswordResetRequest) (*PasswordResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordReset not implemented")
}
func (UnimplementedStreamGreeterServer) GetUserInfoById(context.Context, *GetUserInfoByIdRequest) (*GetUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoById not implemented")
}
func (UnimplementedStreamGreeterServer) UpdateUserInfo(context.Context, *UpdateUserInfoRequest) (*UpdateUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInfo not implemented")
}
func (UnimplementedStreamGreeterServer) AddUserAddressInfo(context.Context, *AddUserAddressInfoRequest) (*AddUserAddressInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserAddressInfo not implemented")
}
func (UnimplementedStreamGreeterServer) GetUserAddressList(context.Context, *GetUserAddressListRequest) (*GetUserAddressListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAddressList not implemented")
}
func (UnimplementedStreamGreeterServer) GetUserAddressInfo(context.Context, *GetUserAddressInfoRequest) (*UserAddressInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAddressInfo not implemented")
}
func (UnimplementedStreamGreeterServer) UpdateUserAddressInfo(context.Context, *UpdateUserAddressInfoRequest) (*UpdateUserAddressInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserAddressInfo not implemented")
}
func (UnimplementedStreamGreeterServer) DeleteUserAddressInfo(context.Context, *DeleteUserAddressInfoRequest) (*DeleteUserAddressInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserAddressInfo not implemented")
}
func (UnimplementedStreamGreeterServer) mustEmbedUnimplementedStreamGreeterServer() {}

// UnsafeStreamGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamGreeterServer will
// result in compilation errors.
type UnsafeStreamGreeterServer interface {
	mustEmbedUnimplementedStreamGreeterServer()
}

func RegisterStreamGreeterServer(s grpc.ServiceRegistrar, srv StreamGreeterServer) {
	s.RegisterService(&StreamGreeter_ServiceDesc, srv)
}

func _StreamGreeter_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamGreeterServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamGreeter_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamGreeterServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamGreeter_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamGreeterServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamGreeter_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamGreeterServer).LoginUser(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamGreeter_LogoutUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamGreeterServer).LogoutUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamGreeter_LogoutUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamGreeterServer).LogoutUser(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamGreeter_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamGreeterServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamGreeter_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamGreeterServer).GetUserInfo(ctx, req.(*GetUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamGreeter_RefreshUserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamGreeterServer).RefreshUserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamGreeter_RefreshUserToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamGreeterServer).RefreshUserToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamGreeter_PasswordResetApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordResetApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamGreeterServer).PasswordResetApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamGreeter_PasswordResetApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamGreeterServer).PasswordResetApply(ctx, req.(*PasswordResetApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamGreeter_PasswordReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamGreeterServer).PasswordReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamGreeter_PasswordReset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamGreeterServer).PasswordReset(ctx, req.(*PasswordResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamGreeter_GetUserInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamGreeterServer).GetUserInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamGreeter_GetUserInfoById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamGreeterServer).GetUserInfoById(ctx, req.(*GetUserInfoByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamGreeter_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamGreeterServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamGreeter_UpdateUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamGreeterServer).UpdateUserInfo(ctx, req.(*UpdateUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamGreeter_AddUserAddressInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserAddressInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamGreeterServer).AddUserAddressInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamGreeter_AddUserAddressInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamGreeterServer).AddUserAddressInfo(ctx, req.(*AddUserAddressInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamGreeter_GetUserAddressList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAddressListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamGreeterServer).GetUserAddressList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamGreeter_GetUserAddressList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamGreeterServer).GetUserAddressList(ctx, req.(*GetUserAddressListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamGreeter_GetUserAddressInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAddressInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamGreeterServer).GetUserAddressInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamGreeter_GetUserAddressInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamGreeterServer).GetUserAddressInfo(ctx, req.(*GetUserAddressInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamGreeter_UpdateUserAddressInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserAddressInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamGreeterServer).UpdateUserAddressInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamGreeter_UpdateUserAddressInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamGreeterServer).UpdateUserAddressInfo(ctx, req.(*UpdateUserAddressInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamGreeter_DeleteUserAddressInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserAddressInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamGreeterServer).DeleteUserAddressInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamGreeter_DeleteUserAddressInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamGreeterServer).DeleteUserAddressInfo(ctx, req.(*DeleteUserAddressInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StreamGreeter_ServiceDesc is the grpc.ServiceDesc for StreamGreeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamGreeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.StreamGreeter",
	HandlerType: (*StreamGreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _StreamGreeter_Register_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _StreamGreeter_LoginUser_Handler,
		},
		{
			MethodName: "LogoutUser",
			Handler:    _StreamGreeter_LogoutUser_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _StreamGreeter_GetUserInfo_Handler,
		},
		{
			MethodName: "RefreshUserToken",
			Handler:    _StreamGreeter_RefreshUserToken_Handler,
		},
		{
			MethodName: "PasswordResetApply",
			Handler:    _StreamGreeter_PasswordResetApply_Handler,
		},
		{
			MethodName: "PasswordReset",
			Handler:    _StreamGreeter_PasswordReset_Handler,
		},
		{
			MethodName: "GetUserInfoById",
			Handler:    _StreamGreeter_GetUserInfoById_Handler,
		},
		{
			MethodName: "UpdateUserInfo",
			Handler:    _StreamGreeter_UpdateUserInfo_Handler,
		},
		{
			MethodName: "AddUserAddressInfo",
			Handler:    _StreamGreeter_AddUserAddressInfo_Handler,
		},
		{
			MethodName: "GetUserAddressList",
			Handler:    _StreamGreeter_GetUserAddressList_Handler,
		},
		{
			MethodName: "GetUserAddressInfo",
			Handler:    _StreamGreeter_GetUserAddressInfo_Handler,
		},
		{
			MethodName: "UpdateUserAddressInfo",
			Handler:    _StreamGreeter_UpdateUserAddressInfo_Handler,
		},
		{
			MethodName: "DeleteUserAddressInfo",
			Handler:    _StreamGreeter_DeleteUserAddressInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
