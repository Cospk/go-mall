// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: order.proto

package order

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	StreamGreeter_CreateOrder_FullMethodName    = "/order.StreamGreeter/CreateOrder"
	StreamGreeter_GetUserOrders_FullMethodName  = "/order.StreamGreeter/GetUserOrders"
	StreamGreeter_GetOrderInfo_FullMethodName   = "/order.StreamGreeter/GetOrderInfo"
	StreamGreeter_CancelOrder_FullMethodName    = "/order.StreamGreeter/CancelOrder"
	StreamGreeter_OrderCreatePay_FullMethodName = "/order.StreamGreeter/OrderCreatePay"
)

// StreamGreeterClient is the client API for StreamGreeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamGreeterClient interface {
	// 创建订单
	CreateOrder(ctx context.Context, in *OrderCreateRequest, opts ...grpc.CallOption) (*OrderCreateReply, error)
	// 获取用户订单列表
	GetUserOrders(ctx context.Context, in *UserOrdersRequest, opts ...grpc.CallOption) (*UserOrdersReply, error)
	// 获取订单详情
	GetOrderInfo(ctx context.Context, in *OrderInfoRequest, opts ...grpc.CallOption) (*OrderInfoReply, error)
	// 取消订单
	CancelOrder(ctx context.Context, in *OrderCancelRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	// 创建订单支付
	OrderCreatePay(ctx context.Context, in *OrderPayCreateRequest, opts ...grpc.CallOption) (*OrderPayCreateReply, error)
}

type streamGreeterClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamGreeterClient(cc grpc.ClientConnInterface) StreamGreeterClient {
	return &streamGreeterClient{cc}
}

func (c *streamGreeterClient) CreateOrder(ctx context.Context, in *OrderCreateRequest, opts ...grpc.CallOption) (*OrderCreateReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderCreateReply)
	err := c.cc.Invoke(ctx, StreamGreeter_CreateOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamGreeterClient) GetUserOrders(ctx context.Context, in *UserOrdersRequest, opts ...grpc.CallOption) (*UserOrdersReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserOrdersReply)
	err := c.cc.Invoke(ctx, StreamGreeter_GetUserOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamGreeterClient) GetOrderInfo(ctx context.Context, in *OrderInfoRequest, opts ...grpc.CallOption) (*OrderInfoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderInfoReply)
	err := c.cc.Invoke(ctx, StreamGreeter_GetOrderInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamGreeterClient) CancelOrder(ctx context.Context, in *OrderCancelRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, StreamGreeter_CancelOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamGreeterClient) OrderCreatePay(ctx context.Context, in *OrderPayCreateRequest, opts ...grpc.CallOption) (*OrderPayCreateReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderPayCreateReply)
	err := c.cc.Invoke(ctx, StreamGreeter_OrderCreatePay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamGreeterServer is the server API for StreamGreeter service.
// All implementations must embed UnimplementedStreamGreeterServer
// for forward compatibility
type StreamGreeterServer interface {
	// 创建订单
	CreateOrder(context.Context, *OrderCreateRequest) (*OrderCreateReply, error)
	// 获取用户订单列表
	GetUserOrders(context.Context, *UserOrdersRequest) (*UserOrdersReply, error)
	// 获取订单详情
	GetOrderInfo(context.Context, *OrderInfoRequest) (*OrderInfoReply, error)
	// 取消订单
	CancelOrder(context.Context, *OrderCancelRequest) (*CommonResponse, error)
	// 创建订单支付
	OrderCreatePay(context.Context, *OrderPayCreateRequest) (*OrderPayCreateReply, error)
	mustEmbedUnimplementedStreamGreeterServer()
}

// UnimplementedStreamGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedStreamGreeterServer struct {
}

func (UnimplementedStreamGreeterServer) CreateOrder(context.Context, *OrderCreateRequest) (*OrderCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedStreamGreeterServer) GetUserOrders(context.Context, *UserOrdersRequest) (*UserOrdersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserOrders not implemented")
}
func (UnimplementedStreamGreeterServer) GetOrderInfo(context.Context, *OrderInfoRequest) (*OrderInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderInfo not implemented")
}
func (UnimplementedStreamGreeterServer) CancelOrder(context.Context, *OrderCancelRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedStreamGreeterServer) OrderCreatePay(context.Context, *OrderPayCreateRequest) (*OrderPayCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderCreatePay not implemented")
}
func (UnimplementedStreamGreeterServer) mustEmbedUnimplementedStreamGreeterServer() {}

// UnsafeStreamGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamGreeterServer will
// result in compilation errors.
type UnsafeStreamGreeterServer interface {
	mustEmbedUnimplementedStreamGreeterServer()
}

func RegisterStreamGreeterServer(s grpc.ServiceRegistrar, srv StreamGreeterServer) {
	s.RegisterService(&StreamGreeter_ServiceDesc, srv)
}

func _StreamGreeter_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamGreeterServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamGreeter_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamGreeterServer).CreateOrder(ctx, req.(*OrderCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamGreeter_GetUserOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamGreeterServer).GetUserOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamGreeter_GetUserOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamGreeterServer).GetUserOrders(ctx, req.(*UserOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamGreeter_GetOrderInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamGreeterServer).GetOrderInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamGreeter_GetOrderInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamGreeterServer).GetOrderInfo(ctx, req.(*OrderInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamGreeter_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderCancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamGreeterServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamGreeter_CancelOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamGreeterServer).CancelOrder(ctx, req.(*OrderCancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamGreeter_OrderCreatePay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderPayCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamGreeterServer).OrderCreatePay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamGreeter_OrderCreatePay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamGreeterServer).OrderCreatePay(ctx, req.(*OrderPayCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StreamGreeter_ServiceDesc is the grpc.ServiceDesc for StreamGreeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamGreeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.StreamGreeter",
	HandlerType: (*StreamGreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _StreamGreeter_CreateOrder_Handler,
		},
		{
			MethodName: "GetUserOrders",
			Handler:    _StreamGreeter_GetUserOrders_Handler,
		},
		{
			MethodName: "GetOrderInfo",
			Handler:    _StreamGreeter_GetOrderInfo_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _StreamGreeter_CancelOrder_Handler,
		},
		{
			MethodName: "OrderCreatePay",
			Handler:    _StreamGreeter_OrderCreatePay_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order.proto",
}
